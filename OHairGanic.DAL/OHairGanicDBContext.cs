// <auto-generated> Revised and cleaned version by ChatGPT (fixed invalid ProductId issue) </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using OHairGanic.DAL.Models;

namespace OHairGanic.DAL.Models
{
    public partial class OHairGanicDBContext : DbContext
    {
        

        public OHairGanicDBContext() { }

        public OHairGanicDBContext(DbContextOptions<OHairGanicDBContext> options)
            : base(options)
        {
          
        }

        // ===================== DbSets ======================
        public virtual DbSet<Analysis> Analyses { get; set; }
        public virtual DbSet<Capture> Captures { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<User> Users { get; set; }

        // ===================== Configuration ======================
        

        // ===================== Model Config ======================
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // ---------- ANALYSIS ----------
            modelBuilder.Entity<Analysis>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_Analyses");

                entity.HasIndex(e => e.CaptureId, "IX_Analyses_Capture");
                entity.HasIndex(e => e.CreatedAt, "IX_Analyses_CreatedAt").IsDescending();

                entity.Property(e => e.CreatedAt)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(24)
                    .HasDefaultValue("normal");

                entity.Property(e => e.ModelVersion)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasDefaultValue("rule-v1");

                entity.HasOne(d => d.Capture)
                    .WithMany(p => p.Analyses)
                    .HasForeignKey(d => d.CaptureId)
                    .HasConstraintName("FK_Analyses_Captures");
            });

            // ---------- CAPTURE ----------
            modelBuilder.Entity<Capture>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_Captures");

                entity.HasIndex(e => e.Angle, "IX_Captures_Angle");
                entity.HasIndex(e => new { e.UserId, e.TakenAt }, "IX_Captures_User_TakenAt")
                      .IsDescending(false, true);

                entity.Property(e => e.Angle).IsRequired().HasMaxLength(16);
                entity.Property(e => e.ImageUrl).IsRequired().HasMaxLength(500);
                entity.Property(e => e.TakenAt)
                      .HasPrecision(0)
                      .HasDefaultValueSql("(sysutcdatetime())");

                entity.HasOne(d => d.User)
                      .WithMany(p => p.Captures)
                      .HasForeignKey(d => d.UserId)
                      .HasConstraintName("FK_Captures_Users");
            });

            // ---------- ORDER ----------
            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_Orders");

                entity.HasIndex(e => new { e.UserId, e.CreatedAt }, "IX_Orders_User")
                      .IsDescending(false, true);

                entity.Property(e => e.CreatedAt)
                      .HasPrecision(0)
                      .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.Status)
                      .IsRequired()
                      .HasMaxLength(20)
                      .HasDefaultValue("PENDING");

                entity.HasOne(d => d.User)
                      .WithMany(p => p.Orders)
                      .HasForeignKey(d => d.UserId)
                      .HasConstraintName("FK_Orders_Users");
            });

            // ---------- ORDER DETAIL ----------
            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_OrderDetails");

                entity.HasOne(d => d.Order)
                      .WithMany(p => p.OrderDetails)
                      .HasForeignKey(d => d.OrderId)
                      .OnDelete(DeleteBehavior.Cascade)
                      .HasConstraintName("FK_OrderDetails_Orders");

                entity.HasOne(d => d.Product)
                      .WithMany()
                      .HasForeignKey(d => d.ProductId)
                      .OnDelete(DeleteBehavior.Restrict)
                      .HasConstraintName("FK_OrderDetails_Products");

                entity.Property(e => e.Price).HasColumnType("decimal(10,2)");
            });

            // ---------- PAYMENT ----------
            modelBuilder.Entity<Payment>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_Payments");

                entity.HasIndex(e => e.OrderId, "IX_Payments_Order");

                entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
                entity.Property(e => e.CreatedAt)
                      .HasPrecision(0)
                      .HasDefaultValueSql("(sysutcdatetime())");
                entity.Property(e => e.Currency)
                      .IsRequired()
                      .HasMaxLength(8)
                      .HasDefaultValue("VND");
                entity.Property(e => e.ExpiresAt).HasPrecision(0);
                entity.Property(e => e.PaidAt).HasPrecision(0);
                entity.Property(e => e.Provider)
                      .IsRequired()
                      .HasMaxLength(32)
                      .HasDefaultValue("BANK_TRANSFER_QR");
                entity.Property(e => e.QrImagePath).HasMaxLength(500);
                entity.Property(e => e.QrPayload).HasMaxLength(1024);
                entity.Property(e => e.Status)
                      .IsRequired()
                      .HasMaxLength(16)
                      .HasDefaultValue("PENDING");

                entity.HasOne(d => d.Order)
                      .WithMany(p => p.Payments)
                      .HasForeignKey(d => d.OrderId)
                      .HasConstraintName("FK_Payments_Orders");
            });

            // ---------- PRODUCT ----------
            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_Products");

                entity.HasIndex(e => e.IsActive, "IX_Products_Active")
                      .HasFilter("([IsActive]=(1))");

                entity.HasIndex(e => e.Tags, "IX_Products_Tags");

                entity.Property(e => e.CreatedAt)
                      .HasPrecision(0)
                      .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.ImageUrl).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(true);
                entity.Property(e => e.Name)
                      .IsRequired()
                      .HasMaxLength(200);
                entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
                entity.Property(e => e.Tags)
                      .IsRequired()
                      .HasMaxLength(100);
            });

            // ---------- USER ----------
            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_Users");

                entity.HasIndex(e => e.Email, "UQ_Users_Email").IsUnique();

                entity.Property(e => e.CreatedAt)
                      .HasPrecision(0)
                      .HasDefaultValueSql("(sysutcdatetime())");
                entity.Property(e => e.FullName).HasMaxLength(120);
                entity.Property(e => e.Email).HasMaxLength(255);
                entity.Property(e => e.PasswordHash).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
